#Теория вероятностей

***

##01 Введение

Практические задания отсутствуют

***

##02 Эксперименты, элементарные исходы, события

Практические задания отсутствуют

***

##03 Закон больших чисел

	import random
	
	random.seed(1111)  # метод seed() задаёт степень случайности, не меняйте её
	
	
	def calculate_p(N):
	    cnt_21_40 = 0
	    for i in range(N):
	        random_integer =  random.randint(1, 100)
	        if 21<= random_integer <= 40:
	            cnt_21_40+=1
	    return cnt_21_40/N
	
	
	p_20 = calculate_p(20)
	p_400 = calculate_p(400)
	p_10000 = calculate_p(10000)
	print(p_20,p_400,p_10000)

***

##04 Взаимоисключающие и независимые события, умножение вероятностей

Практические задания отсутствуют

***

##05 Случайные величины, распределение вероятностей и интервалы значений

### Задача 1 / 2

	#код цикла
	for i in range(0, 6):
	        for j in range(0, 6):
	                if spot_matrix[i][j] not in spot_counts.keys():
	                        spot_counts[spot_matrix[i][j]] = 1
	                else:
	                        spot_counts[spot_matrix[i][j]] += 1
	
	spot_probs = {k:spot_counts[k]/36 for k in spot_counts}

### Задача 2 / 2

	sum_probs_one = int(sum(spot_probs.values()))
	print(sum_probs_one)

***

##06 Математическое ожидание и дисперсия

### Задача 1 / 2

	# здесь код ваших вычислений
	expectation = sum([int(x_i)*x_probs[x_i] for x_i in x_probs])
	square_of_expectation = expectation ** 2
	expectation_of_squares = sum(
	    [int(x_i) * int(x_i) * x_probs[x_i] for x_i in x_probs]
	)
	variance = expectation_of_squares - square_of_expectation

### Задача 2 / 2

	weight_probs = {
	    '2': 0.25,
	    '3': 0.5,
	    '5': 0.25,
	}
	
	# здесь код ваших вычислений

	expectation = sum([int(x_i)*weight_probs[x_i] for x_i in weight_probs])
	square_of_expectation = expectation ** 2
	expectation_of_squares = sum(
	    [int(x_i) * int(x_i) * weight_probs[x_i] for x_i in weight_probs]
	)
	variance = expectation_of_squares - square_of_expectation

***

##07 Вероятность успеха в биномиальном эксперименте

Практические задания отсутствуют

***

##08 Биномиальное распределение

### Задача 1 / 5

>В некоторые дни питонов в питонопитомнике кормят грушами, а в некоторые — яблоками...

	n_diets = factorial(7) / (factorial(3) * factorial(4))
	print(n_diets)

### Задача 2 / 5

>Питон Петя решил после питонопитомника поступить в питоноакадемию...

	from matplotlib import pyplot as plt
	from math import factorial
	# вставьте ваш код сюда: сколько экзаменов надо сдать?
	n_exams = 6
	# вставьте ваш код сюда: какова вероятность завалить один экзамен?
	failure_rate = 0.15
	# вставьте ваш код сюда: создайте список distr, в котором будете хранить значения распределения
	distr = []
	for k in range(0, n_exams + 1):
	    # вставьте ваш код сюда: посчитайте вероятность завалить 
	    # 0 экзаменов, 1 экзамен и так далее до 6
	    choose = factorial(n_exams) / (factorial(k) * factorial(n_exams - k))
	    prob = choose * failure_rate ** k * (1 - failure_rate) ** (n_exams - k)
	    distr.append(prob)    
	    
	# построение гистограммы распределения вероятностей
	plt.bar(range(0,n_exams+1), distr)

### Задача 3 / 5

>Ваша компания устраивает важное мероприятие. Пиарщики ищут хотя бы шесть инфопартнёров...

	from matplotlib import pyplot as plt
	from math import factorial
	# вставьте ваш код сюда: какова вероятность заключить контракт?
	p =  0.2 
	# вставьте ваш код сюда: со сколькими компаниями начинаем переговоры?
	n =  30 
	
	# вставьте ваш код сюда: создайте список distr, в котором будете хранить значения распределения
	distr = []
	for k in range(0, n + 1):
	    # вставьте ваш код сюда: постройте распределение вероятностей
	    choose = factorial(n) / (factorial(k) * factorial(n - k))
	    prob = choose * p ** k * (1 - p) ** (n - k)
	    distr.append(prob)
	# вставьте ваш код сюда: постройте гистограмму распределения вероятностей
	plt.bar(range(0, n + 1), distr) 

### Задача 4 / 5

	n =  45 

### Задача 5 / 5

	n =  60

***

##09 Нормальное распределение

### Задача 1 / 3

>Количество посетителей сайта интернет-издания «Кукуруза»...

	from scipy import stats as st
	# вставьте ваш код здесь: чему равно среднее значение распределения
	mu = 100500
	# вставьте ваш код здесь: чему равно стандартное отклонение распределения
	sigma = 3500
	distr = st.norm(mu, sigma)
	
	# вставьте ваш код здесь: где проходит граница для бонуса
	bonus_threshold = 111000
	# вставьте ваш код здесь: где проходит граница для штрафа
	penalty_threshold = 92000
	# вставьте ваш код здесь: посчитайте вероятность получить бонус
	p_bonus = 1 - distr.cdf(bonus_threshold)
	# вставьте ваш код здесь: посчитайте вероятность получить штраф
	p_penalty = distr.cdf(penalty_threshold)
	
	print('Вероятность бонуса:', p_bonus)
	print('Вероятность штрафа:', p_penalty)

### Задача 1 / 3

>Интернет-магазин «Супервип» продаёт сувенирную продукцию для узкой аудитории корпоративных клиентов...

	from scipy import stats as st
	# вставьте ваш код здесь: чему равно среднее значение распределения
	mu = 420
	# вставьте ваш код здесь: чему равно стандартное отклонение распределения
	sigma = 65
	# вставьте ваш код здесь: с какой вероятностью нужно распродать весь товар?
	prob = 0.9
	# вставьте ваш код здесь: сколько единиц товара нужно заказать
	n_shipment = st.norm(mu, sigma).ppf(1-prob) 
	print('Нужно заказать единиц товара:', int(n_shipment))

### Задача 1 / 3

>В интернет-магазине «Вазон» пользователи делают заказы, стоимости которых распределены нормально со средним 2400 руб. и стандартным отклонением 320 руб...

	from scipy import stats as st
	# вставьте ваш код здесь: чему равно среднее значение распределения
	mu = 2400
	# вставьте ваш код здесь: чему равно стандартное отклонение распределения
	sigma = 320
	# вставьте ваш код здесь: какая доля заказов должна быть дороже двух стоимостей доставки?
	threshold = 3/4
	# вставьте ваш код здесь: какую стоимость доставки установить?
	from scipy import stats as st
	# вставьте ваш код здесь: чему равно среднее значение распределения
	mu = 2400
	# вставьте ваш код здесь: чему равно стандартное отклонение распределения
	sigma = 320
	# вставьте ваш код здесь: какая доля заказов должна быть дороже двух стоимостей доставки?
	threshold = 3/4
	# вставьте ваш код здесь: какую стоимость доставки установить?
	max_delivery_price = st.norm(mu, sigma).ppf(1-threshold)/2
	print('Максимальная стоимость доставки курьером:', max_delivery_price)

***

##10 Нормальная аппроксимация биномиального распределения

	from scipy import stats as st
	import math as mt
	
	binom_n = 23000
	binom_p = 0.4
	
	threshold = 9000
	
	mu = binom_n * binom_p
	sigma = mt.sqrt(binom_n * binom_p * (1 - binom_p))
	
	p_threshold = 1- st.norm(mu, sigma).cdf(threshold)
	print(p_threshold)

***

##11 Заключение

Практические задания отсутствуют

***
