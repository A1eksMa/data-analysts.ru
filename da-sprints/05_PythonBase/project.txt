#Задание 1
#==============
# импорт библиотеки pandas
import pandas as pd 
#==============

#Задание 2
#==============
# чтение файла с данными и сохранение в df
df = pd.read_csv('/datasets/yandex_music_project.csv')
#==============

#Задание 3
#==============
# получение первых 10 строк таблицы df
df.head(10)
#==============

#Задание 4
#==============
# получение общей информации о данных в таблице df
df.info()
#==============

#Задание 5
#==============
# Напишите ваш ответ здесь комментарием. Не удаляйте символ #. Не меняйте тип этой ячейки на Markdown.
# userID надо переписать в "змеином_стиле"?
#==============

#Задание 6
#==============
# перечень названий столбцов таблицы df
df.columns
#==============

#Задание 7
#==============
# переименование столбцов
df = df.rename(columns={'  userID':'user_id', 'Track':'track', '  City  ':'city', 'Day':'day'})
#==============

#Задание 8
#==============
# проверка результатов - перечень названий столбцов
df.columns
#==============

#Задание 9
#==============
# подсчёт пропусков
print(df.isna().sum())
#==============

#Задание 10
#==============
columns_to_replace = ['track','artist','genre']
# перебор названий столбцов в цикле и замена пропущенных значений на 'unknown'
for replacement in columns_to_replace:
    df[replacement] = df[replacement].fillna('unknown')
#==============

#Задание 11
#==============
# подсчёт пропусков
print(df.isna().sum())
#==============

#Задание 12
#==============
# подсчёт явных дубликатов
df.duplicated().sum()
#==============

#Задание 13
#==============
# удаление явных дубликатов
df = df.drop_duplicates()
#==============

#Задание 14
#==============
# проверка на отсутствие дубликатов
df.duplicated().sum()
#==============

#Задание 15
#==============
# Просмотр уникальных названий жанров
df['genre'].sort_values().unique()
#==============

#Задание 16
#==============
# Устранение неявных дубликатов
df['genre'] = df['genre'].replace(['hip','hop','hip-hop'],'hiphop')
#==============

#Задание 17
#==============
# Проверка на неявные дубликаты
df['genre'].sort_values().unique()
#==============

#Задание 18
#==============
# Посмотрим, какие города присутствуют в датасете:
#df['city'].unique()
# Подсчёт прослушиваний в каждом городе
#print('В Москве прослушиваний', df['city'].loc[df['city'] == 'Moscow'].count())
#print('В СПб прослушиваний', df['city'].loc[df['city'] == 'Saint-Petersburg'].count())
df.groupby('city')['city'].count()
#==============

#Задание 19
#==============
# Посмотрим, какие дни недели присутствуют в датасете:
#df['day'].unique()
# Подсчёт прослушиваний в каждый из трёх дней
#print('В пн прослушиваний', df['day'].loc[df['day'] == 'Monday'].count())
#print('В ср прослушиваний', df['day'].loc[df['day'] == 'Wednesday'].count())
#print('В пт прослушиваний', df['day'].loc[df['day'] == 'Friday'].count())
df.groupby('day')['day'].count()
#==============

#Задание 20
#==============
# <создание функции number_tracks()>
# Объявляется функция с двумя параметрами: day, city.
# В переменной track_list сохраняются те строки таблицы df, для которых 
# значение в столбце 'day' равно параметру day и одновременно значение
# в столбце 'city' равно параметру city (используйте последовательную фильтрацию
# с помощью логической индексации или сложные логические выражения в одну строку, если вы уже знакомы с ними).
# В переменной track_list_count сохраняется число значений столбца 'user_id',
# рассчитанное методом count() для таблицы track_list.
# Функция возвращает число - значение track_list_count.

# Функция для подсчёта прослушиваний для конкретного города и дня.
# С помощью последовательной фильтрации с логической индексацией она 
# сначала получит из исходной таблицы строки с нужным днём,
# затем из результата отфильтрует строки с нужным городом,
# методом count() посчитает количество значений в колонке user_id. 
# Это количество функция вернёт в качестве результата
def number_tracks(day, city):
    track_list = df.loc[df['day'] == day]
    track_list = track_list.loc[track_list['city'] == city]
    track_list_count = track_list['user_id'].count()
    return track_list_count
#==============

#Задание 21
#==============
# количество прослушиваний в Москве по понедельникам
number_tracks('Monday','Moscow')
#==============
# количество прослушиваний в Санкт-Петербурге по понедельникам
number_tracks('Monday','Saint-Petersburg')
#==============
# количество прослушиваний в Москве по средам
number_tracks('Wednesday','Moscow')
#==============
# количество прослушиваний в Санкт-Петербурге по средам
number_tracks('Wednesday','Saint-Petersburg')
#==============
# количество прослушиваний в Москве по пятницам
number_tracks('Friday','Moscow')
#==============
# количество прослушиваний в Санкт-Петербурге по пятницам
number_tracks('Friday','Saint-Petersburg')
#==============

#Задание 22
#==============
# Таблица с результатами
columns = ['city', 'monday', 'wednesday', 'friday']
m1 = number_tracks('Monday','Moscow')
m3 = number_tracks('Wednesday','Moscow')
m5 = number_tracks('Friday','Moscow')
s1 = number_tracks('Monday','Saint-Petersburg')
s3 = number_tracks('Wednesday','Saint-Petersburg')
s5 = number_tracks('Friday','Saint-Petersburg')
data = [['Moscow',m1,m3,m5],['Saint-Petersburg',s1,s3,s5]]
print(pd.DataFrame(data=data,columns=columns))
#==============

#Задание 23
#==============
# получение таблицы moscow_general из тех строк таблицы df, 
# для которых значение в столбце 'city' равно 'Moscow'
moscow_general = df.loc[df['city'] == 'Moscow']
#print(moscow_general.head(5))
#==============
# получение таблицы spb_general из тех строк таблицы df,
# для которых значение в столбце 'city' равно 'Saint-Petersburg'
spb_general = df.loc[df['city'] == 'Saint-Petersburg']
#print(spb_general.head(5))
#==============

#Задание 24
#==============
# Объявление функции genre_weekday() с параметрами table, day, time1, time2,
# которая возвращает информацию о самых популярных жанрах в указанный день в
# заданное время:
# 1) в переменную genre_df сохраняются те строки переданного датафрейма table, для
#    которых одновременно:
#    - значение в столбце day равно значению аргумента day
#    - значение в столбце time больше значения аргумента time1
#    - значение в столбце time меньше значения аргумента time2
#    Используйте последовательную фильтрацию с помощью логической индексации.
# 2) сгруппировать датафрейм genre_df по столбцу genre, взять один из его
#    столбцов и посчитать методом count() количество записей для каждого из
#    присутствующих жанров, получившийся Series записать в переменную
#    genre_df_count
# 3) отсортировать genre_df_count по убыванию встречаемости и сохранить
#    в переменную genre_df_sorted
# 4) вернуть Series из 10 первых значений genre_df_sorted, это будут топ-10
#    популярных жанров (в указанный день, в заданное время)

def genre_weekday(df, day, time1, time2):
    # последовательная фильтрация
    # оставляем в genre_df только те строки df, у которых день равен day
    genre_df = df.loc[df['day'] == day]
    # оставляем в genre_df только те строки genre_df, у которых время меньше time2
    genre_df = genre_df.loc[df['time'] < time2]
    # оставляем в genre_df только те строки genre_df, у которых время больше time1
    genre_df = genre_df.loc[df['time'] > time1]
    # сгруппируем отфильтрованный датафрейм по столбцу с названиями жанров, возьмём столбец genre и посчитаем кол-во строк для каждого жанра методом count()
    genre_df_grouped = genre_df.groupby('genre')['genre'].count()
    # отсортируем результат по убыванию (чтобы в начале Series оказались самые популярные жанры)
    genre_df_sorted = genre_df_grouped.sort_values(ascending=False)
    # вернём Series с 10 самыми популярными жанрами в указанный отрезок времени заданного дня
    return genre_df_sorted[:10]
#==============

#Задание 25
#==============
# вызов функции для утра понедельника в Москве (вместо df — таблица moscow_general)
# объекты, хранящие время, являются строками и сравниваются как строки
# пример вызова: genre_weekday(moscow_general, 'Monday', '07:00', '11:00')
genre_weekday(moscow_general, 'Monday', '07:00', '11:00')
#==============
# вызов функции для утра понедельника в Петербурге (вместо df — таблица spb_general)
genre_weekday(spb_general, 'Monday', '07:00', '11:00')
#==============
# вызов функции для вечера пятницы в Москве
genre_weekday(moscow_general, 'Friday', '17:00', '23:00')
#==============
# вызов функции для вечера пятницы в Петербурге
genre_weekday(spb_general, 'Friday', '17:00', '23:00')
#==============

#Задание 26
#==============
# одной строкой: группировка таблицы moscow_general по столбцу 'genre', 
# подсчёт числа значений 'genre' в этой группировке методом count(), 
# сортировка получившегося Series в порядке убывания и сохранение в moscow_genres
moscow_genres = moscow_general.groupby('genre')['genre'].count().sort_values(ascending=False)
#==============

#Задание 27
#==============
# просмотр первых 10 строк moscow_genres
print(moscow_genres.head(10))
#==============

#Задание 28
#==============
# одной строкой: группировка таблицы spb_general по столбцу 'genre', 
# подсчёт числа значений 'genre' в этой группировке методом count(), 
# сортировка получившегося Series в порядке убывания и сохранение в spb_genres
spb_genres = spb_general.groupby('genre')['genre'].count().sort_values(ascending=False)
#==============

#Задание 29
#==============
# просмотр первых 10 строк spb_genres
print(spb_genres.head(10))
#==============
