#01 Введение


#02 Функции и высокая кухня


#03 Собственные функции


#04 Неповторимый код


#05 В поисках смысла


#06 Параметры: значения по умолчанию

#==============

def filter_by_year(data, year=1990):

    res = []

    for row in data:

        if row[2] > year:

            res.append(row)

    return res # возвращаем отфильтрованную таблицу — накопленный список списков



# функция печати таблицы, принимает на вход список списков, ничего не возвращает (неявно возвращается None)

def print_movie_table(data):

    for movie in data:

        for elem in movie:

            print(f'{elem:<45}', end='')

        print()


movies_table = [

    ['Побег из Шоушенка', 'США', 1994, 'драма', 142, 9.111],

    ['Крёстный отец', 'США', 1972, 'драма, криминал', 175, 8.730],

    ['Тёмный рыцарь', 'США', 2008, 'фантастика, боевик, триллер', 152, 8.499],

    ['Список Шиндлера', 'США', 1993, 'драма', 195, 8.818],

    ['Властелин колец: Возвращение Короля', 'Новая Зеландия', 2003, 'фэнтези, приключения, драма', 201, 8.625],

    ['Криминальное чтиво', 'США', 1994, 'триллер, комедия, криминал', 154, 8.619],

    ['Хороший, плохой, злой', 'Италия', 1966, 'вестерн', 178, 8.521],

    ['Бойцовский клуб', 'США', 1999, 'триллер, драма, криминал', 139, 8.644],

    ['Харакири', 'Япония', 1962, 'драма, боевик, история', 133, 8.106],

    ['Сталкер', 'СССР', 1979, 'фантастика, драма, детектив', 163, 8.083],

    ['Иди и смотри', 'СССР', 1985, 'драма, военный', 136, 8.094],

    ['Один дома', 'США', 1990, 'комедия, семейный', 103, 8.305]

]


movies_table_filtered = filter_by_year(movies_table)

print_movie_table(movies_table_filtered)
#==============

def print_movie_table(data):

    for movie in data:

        for elem in movie:

            print(f'{elem:<45}', end='')

        print()



def filter_by_genre(data, genre='драма'):

    res = []

    for row in data:

        if genre in row[3]:

            res.append(row)

    return res



movies_table = [

    ['Побег из Шоушенка', 'США', 1994, 'драма', 142, 9.111],

    ['Крёстный отец', 'США', 1972, 'драма, криминал', 175, 8.730],

    ['Тёмный рыцарь', 'США', 2008, 'фантастика, боевик, триллер', 152, 8.499],

    ['Список Шиндлера', 'США', 1993, 'драма', 195, 8.818],

    ['Властелин колец: Возвращение Короля', 'Новая Зеландия', 2003, 'фэнтези, приключения, драма', 201, 8.625],

    ['Криминальное чтиво', 'США', 1994, 'триллер, комедия, криминал', 154, 8.619],

    ['Хороший, плохой, злой', 'Италия', 1966, 'вестерн', 178, 8.521],

    ['Бойцовский клуб', 'США', 1999, 'триллер, драма, криминал', 139, 8.644],

    ['Харакири', 'Япония', 1962, 'драма, боевик, история', 133, 8.106],

    ['Сталкер', 'СССР', 1979, 'фантастика, драма, детектив', 163, 8.083],

    ['Иди и смотри', 'СССР', 1985, 'драма, военный', 136, 8.094]

]


movies_table_filtered = filter_by_genre(movies_table)

print_movie_table(movies_table_filtered)

#==============
#07 Позиционные и именованные аргументы


#08 Результат по ту сторону функции


#09 Лаборатория функций

#==============

def find_rect_square(side1, side2):

    return(side1*side2)


print(find_rect_square(10, 12))

#==============

def is_speed_ok(speed):

    if speed <= 60:

        return True

    else:

        return False


current_speed = 46

print(is_speed_ok(current_speed))

current_speed = 70

print(is_speed_ok(current_speed))

current_speed = 60

print(is_speed_ok(current_speed))

#==============

def get_hours_and_minutes(time_string):

    hours, minutes = time_string.split (sep=':', maxsplit=-1)

    hours = int(hours)

    minutes = int(minutes)

    return hours, minutes 


time_str = '12:35'

hours, minutes = get_hours_and_minutes(time_str)

print(hours, minutes)

#==============

def get_minutes_and_seconds(time_string):

    time_list = time_string.split(':')

    m = int(time_list[0])

    s = int(time_list[1])

    return m, s



def check_song_duration(time_string):

    m, s = get_minutes_and_seconds(time_string)

    if (m*60+s) < 210:

        return True

    else:

        return False



print(check_song_duration('4:35'))

print(check_song_duration('2:10'))

#==============

def get_minutes_and_seconds(time_string):

    time_list = time_string.split(':')

    m = int(time_list[0])

    s = int(time_list[1])

    return m, s



def check_song_duration(time_string):

    minutes, seconds = get_minutes_and_seconds(time_string)

    seconds = minutes * 60 + seconds

    return seconds <= 210



tracks = ['2:25', '2:35', '3:45', '2:00', '5:10']

for index in tracks:

    print(check_song_duration(index))

#==============


#10 Заключение
