#Проектирование и разработка дашбордов в dash
##01 Введение
Практические задания отсутствуют
***
##02 Дашборды
### Задание 1
	#!/usr/bin/python
	# -*- coding: utf-8 -*-
	
	import dash
	import dash_core_components as dcc
	import dash_html_components as html
	
	import plotly.graph_objs as go
	
	import pandas as pd
	import math
	
	# задаём данные для отрисовки
	x = range(-100, 100, 1)
	x = [x / 10 for x in x]
	y_sin = [math.sin(x) for x in x]
	y_cos = [math.cos(x) for x in x] # напишите код
	data = [
	        go.Scatter(x = pd.Series(x), y = pd.Series(y_sin), mode = 'lines', name = 'sin(x)'),
	        go.Scatter(x = pd.Series(x), y = pd.Series(y_cos), mode = 'lines', name = 'cos(x)'), # напишите код
	       ]
	
	# задаём лейаут
	external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
	app = dash.Dash(__name__, external_stylesheets=external_stylesheets,compress=False)
	app.layout = html.Div(children=[  
	    
	    # формируем html
	    html.H1(children = 'Тригонометрические функции'),
	
	    dcc.Graph(
	        figure = {'data':  data,
	                  'layout': go.Layout(xaxis = {'title': 'x'}, yaxis = {'title': 'y'})
		                 },
	        id = 'trig_func'
	    ),      
	 
	])
	
	# описываем логику дашборда
	if __name__ == '__main__':
	    app.run_server(host='0.0.0.0', port=3000)
***
### Задание 2
	#!/usr/bin/python
	# -*- coding: utf-8 -*-
	
	import dash
	import dash_core_components as dcc
	import dash_html_components as html
	
	import plotly.graph_objs as go
	
	import pandas as pd
	
	# задаём данные для отрисовки
	games_raw = pd.read_csv('/datasets/games_full.csv')
	games_raw['Year_of_Release'] = pd.to_datetime(games_raw['Year_of_Release'])
	
	# формируем данные для отчёта
	games_grouped = (games_raw.groupby(['Genre','Year_of_Release']) # ваш код
	                          .agg({'Name':'count'}) # ваш код
	                          .reset_index()
	                          .rename(columns = {'Name':'Games Released'}) # ваш код
	                )
	
	# формируем графики для отрисовки
	data = []
	for genre in games_grouped['Genre'].unique():
	    current = games_grouped.query('Genre == @genre')
	    data += [go.Scatter(x = current['Year_of_Release'], # напишите код
	                        y = current['Games Released'], # напишите код
	                        mode = 'lines',
	                        stackgroup = 'one', # напишите код
	                        name = genre)]
	
	# задаём лейаут
	external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
	app = dash.Dash(__name__, external_stylesheets=external_stylesheets,compress=False)
	app.layout = html.Div(children=[  
	    
	    # формируем html
	    html.H1(children = 'Выпуск игр по годам'),
	
	    dcc.Graph(
	        figure = {'data': data,
	                  'layout': go.Layout(xaxis = {'title': 'Год'},
	                                      yaxis = {'title': 'Выпущенные игры'})
	                 },
	        id = 'games_by_year' # ваш код
	    ),      
	 
	])
	
	# описываем логику дашборда
	if __name__ == '__main__':
	    app.run_server(host='0.0.0.0', port=3000)
***
### Задание 3
	# !/usr/bin/python
	# -*- coding: utf-8 -*-
		
	import dash
	import dash_core_components as dcc
	import dash_html_components as html
	
	import plotly.graph_objs as go
	
	import pandas as pd
	
	# задаём данные для отрисовки
	from sqlalchemy import create_engine
	
	# пример подключения к базе данных для Postresql
	# db_config = {'user': 'my_user',
	#             'pwd': 'my_user_password',
	#             'host': 'localhost',
	#             'port': 5432,
	#             'db': 'games'}
	# engine = create_engine('postgresql://{}:{}@{}:{}/{}'.format(db_config['user'],
	#                                                            db_config['pwd'],
	#                                                            db_config['host'],
	#                                                            db_config['port'],
	#                                                            db_config['db']))
	# пример подключения к базе данных для Sqlite
	engine = create_engine('sqlite:////db/games.db', echo = False)
	
	# получаем сырые данные
	# напишите код
	query = '''
	            SELECT * FROM data_raw
	        '''
	games_raw = pd.io.sql.read_sql(query, con = engine)
	
	# формируем данные для отчёта
	games_grouped = (games_raw.groupby(['genre', 'year_of_release'])
	                          .agg({'name':'count'})
	                          .reset_index()
	                          .rename(columns = {'name':'Games Released'})
	                )

	# формируем графики для отрисовки
	data_games_by_year = []
	for genre in games_grouped['genre'].unique():
	    current = games_grouped.query('genre == @genre')
	    data_games_by_year += [go.Scatter(x = current['year_of_release'], # напишите код
	                        y = current['Games Released'], # напишите код
	                        mode = 'lines',
	                        stackgroup = 'one', # напишите код
	                        name = genre)] # напишите код
	
	
	
	# задаём лейаут
	external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
	app = dash.Dash(__name__, external_stylesheets=external_stylesheets,compress=False)
	app.layout = html.Div(children=[  
	    
	    # формируем html
	    html.H1(children = 'Выпуск игр по годам'),
	
	    dcc.Graph(
	        figure = {'data': data_games_by_year,
	                  'layout': go.Layout(xaxis = {'title': 'Год'},
	                                      yaxis = {'title': 'Выпущенные игры'})
	                 },
	        id = 'games_by_year'
	    ),         
	 
	])
	
	# описываем логику дашборда
	if __name__ == '__main__':
	    app.run_server(host='0.0.0.0', port=3000)
***
##03 Сбор требований при создании дашборда
Практические задания отсутствуют
***
##04 Как создавать основные типы графиков в dash
***
### Задание 1
***
### Задание 2
***
### Задание 3
***
### Задание 4
***
### Задание 5
***
### Задание 6
***
### Задание 7
***
##05 
Практические задания отсутствуют
***
##06 
Практические задания отсутствуют
***
##07 
Практические задания отсутствуют
***
##08 
##09 
Практические задания отсутствуют
***
##10 
Практические задания отсутствуют
***
##11 Заключение
Практические задания отсутствуют
***
