#Работа с несколькими источниками данных

***

##01 Введение

Практические задания отсутствуют

***

##02 Срез по данным из внешнего словаря

Практические задания отсутствуют

***

##03 Срез по данным из внешнего словаря (продолжение)

###Задача 1 / 4

>**Проблема:** в выборке есть АЗС, на которых длительность большинства заездов короче 60 секунд

	good_ids = too_fast_stat.query('too_fast < 0.5')
	good_data = data.query('id in @good_ids.index')
	print(len(data))
	print(len(good_data))

###Задача 2 / 4

>**Проблема:** в выборке есть аномально быстрые и аномально медленные заезды. Скорее всего, их совершали не те, кто приезжал просто заправиться


	good_data = good_data.query('60<=time_spent<=1000')
	print(len(good_data))

###Задача 3 / 4

>Постройте гистограмму распределения медианной длительности заправки по всем АЗС

	good_stations_stat = good_data.pivot_table(index='id', values='time_spent', aggfunc='median')
	good_stations_stat.hist(bins=50)

###Задача 4 / 4

>Рассчитайте медианную продолжительность заезда для каждой сети и выведите на экран список в порядке возрастания

	good_stat = good_data.pivot_table(index='name', values='time_spent', aggfunc='median')
	print(good_stat.sort_values(by='time_spent'))

***

##04 Добавляем столбец

Практические задания отсутствуют

***

##05 Добавляем столбец (продолжение)

>... посмотрите, как «типичные» средняя и медианная длительности заправки различаются в зависимости от данных: сырых или отфильтрованных

	stat['good_time_spent'] = good_stat['time_spent']
	print(stat)

***

##06 Объединяем данные из двух таблиц

>Пора посмотреть, как заезды распределяются внутри сетей...

	id_name = good_data.pivot_table(index='id', values='name', aggfunc=['first', 'count'])
	print(id_name.head(5))

***

##07 Переименование столбцов

>... избавившись от двухэтажных названий столбцов. Сделайте их одноэтажными и переименуйте

	id_name.columns = ['name', 'count']
	print(id_name.head(5))

***

##08 Объединение столбцов методами merge() и join()

###Задача 1 / 4

>Предупреждаем, сейчас будет запутанно...

	station_stat_full = id_name.merge(good_stations_stat, on='id')
	print(station_stat_full.head(5))

###Задача 2 / 4

>- Используя данные из station_stat_full, постройте гистограмму числа заездов на 30 корзин
- Постройте вторую гистограмму по тем же данным, но теперь задайте диапазон от 0 до 300 заездов
- Сравните полученные гистограммы

	station_stat_full['count'].hist(bins=30)
	station_stat_full['count'].hist(bins=30, range=(0,300))	

###Задача 3 / 4

>Изучив построенные гистограммы, вы решили исключить те АЗС, на которые в течение семи дней заезжали 30 или менее раз

	good_stat2 = station_stat_full.query('count > 30').pivot_table(index='name', values='time_spent', aggfunc=['median', 'count'])
	good_stat2.columns = ['median_time', 'stations']
	print(good_stat2.head(5))	

###Задача 4 / 4

>Снова вызовите таблицу `stat`, которую вы создали несколько уроков назад...

	final_stat = stat.join(good_stat2)
	print(final_stat)		

***

##09 Заключение

Практические задания отсутствуют

***
